% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/link.R
\name{elink}
\alias{elink}
\alias{elink_map}
\title{ELink API for fetching links between databases}
\usage{
elink(
  id_set,
  db,
  ...,
  retmode = "xml",
  cmd = NA,
  .batch = 100L,
  .process = NA,
  .method = NA,
  .multi = "explode",
  .progress = TRUE,
  .cookies = NA,
  .path = NULL,
  .call = rlang::current_env()
)

elink_map(
  id_set,
  db,
  ...,
  .cookies = NA,
  .path = NULL,
  .call = rlang::current_env()
)
}
\arguments{
\item{id_set}{ID set object.}

\item{db}{target database name.}

\item{...}{additional API parameters (refer to Entrez documentation).
Any set to \code{NULL} are removed.}

\item{retmode}{response format.}

\item{cmd}{ELink command. If \code{NA} either \code{"neighbor"} or \code{"neighbour_history"} will
be used based on the type of input.}

\item{.batch}{maximum number of UIDs to submit per request.
For history server inputs, ELink is very fast.
For explict ID lists, it tends to time out when requesting too many at once.
\code{.batch} only applies when \code{id_set} is an explicit list.
Set to \code{NULL} to prevent batching.}

\item{.process}{function that processes the API results.
Can be a function or builtin processor as described in \code{\link{process}}.
Additional builtin processors are available:
\code{"sets"} to get a data frame of ID set objects,
\code{"flat"} to get a data frame of UIDs, or
\code{NA} to use a sensible choice based on parameters.}

\item{.method}{HTTP verb.
For \code{"POST"}, any params with vector values (usually just \code{id}) are sent in the
request body instead of the URL.}

\item{.multi}{controls how repeated params are handled (see \code{\link[httr2:req_url]{httr2::req_url_query()}}).}

\item{.progress}{controls progress bar; see \code{progress} argument of \code{\link[httr2:req_perform_sequential]{httr2::req_perform_sequential}}.}

\item{.cookies}{path to persist cookies.
If \code{NULL}, cookies are not added to the request.
For helper functions: when \code{NA}, a temporary file is created (in this case only,
the temporary file will be cleaned up once all requests are performed).}

\item{.call}{call environment to use in error messages/traces.
You only need to specify this in internal helper functions that don't need to be
mentioned in error messages.}
}
\value{
concatenated output of \code{.process}.
For \code{elink(.process = "sets")} a data frame with columns
\describe{
\item{\code{from}}{Source link set.}
\item{\code{to}}{Target link set.}
\item{\code{linkname}}{Link name (see \url{https://eutils.ncbi.nlm.nih.gov/entrez/query/static/entrezlinks.html} or \code{\link{einfo}}).}
}
For \code{elink_map()} and \code{elink(.process = "flat")} a data frame with columns
\describe{
\item{\code{db_from}}{Source database name.}
\item{\code{id_from}}{Source identifier. Can be a list column depending on how \code{\link{elink}} was called.}
\item{\code{db_to}}{Target database name.}
\item{\code{linkname}}{Link name (see \url{https://eutils.ncbi.nlm.nih.gov/entrez/query/static/entrezlinks.html} or \code{\link{einfo}}).}
\item{\code{id_to}}{Target identifier. In general this will be a list column.}
}
}
\description{
\code{elink()} offers direct access to the ELink API endpoint, which has many different
input and output formats depending on parameters. If you just want a one-to-one
mapping of \code{neighbor} links, use \code{elink_map()}, which handles this for you.
}
\section{One-to-one mapping}{

Note that some ways of calling this API on multiple UIDs result in the one-to-one
association of the input and output sets getting lost. The way around this is to
specify each ID as a separate parameter rather than a single comma-separated param.
This is handled by the default choice of \code{.multi = "explode"}. When using a web
history token as input, there is no corresponding way to ensure one-to-one mapping.
To ensure that the result is always one-to-one, use \code{elink_map()}, which may make
several API requests to achieve the result.
}

\seealso{
Other API methods: 
\code{\link{efetch}()},
\code{\link{einfo}()},
\code{\link{entrez_count}()},
\code{\link{entrez_translate}()},
\code{\link{epost}()},
\code{\link{esearch}()},
\code{\link{esummary}()}
}
\concept{API methods}
